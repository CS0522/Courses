Open Listにおける状態管理の手法の違い: 

深さ優先探索: 
	Stackみたいで、先に入ったのは最後に出ます。

幅優先探索: 
	Queueみたいで、先にはいったのは先に出ます。

最適探索: 
	ある状態から接続していますが、まだ探査いない状態を全て Open List に追加します。
	累積 cost を計算しました後、計算値によって小さい順に状態を並べます。

最良優先探索: 
	ある状態から接続していますが、まだ探査いない状態を全て Open List に追加します。
	予測評価値によって小さい順に状態を並べます。

A* Algorithm: 
	ある状態から全ての接続していて状態の累積 cost を計算し、累積 cost と予測評価値から f 関数を計算します。
	そして Open List と Closed Listの中の状態のf関数を比べて、
	元の値より小さければ、f関数の値を更新します。
	既に Closed List に入った状態は元のを削除し、新しいのを Open List に追加します。